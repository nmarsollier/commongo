// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rabbit/publisher.go

// Package mockgen is a generated GoMock package.
package mktools

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitPublisher is a mock of RabbitPublisher interface.
type MockRabbitPublisher[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitPublisherMockRecorder[T]
}

// MockRabbitPublisherMockRecorder is the mock recorder for MockRabbitPublisher.
type MockRabbitPublisherMockRecorder[T any] struct {
	mock *MockRabbitPublisher[T]
}

// NewMockRabbitPublisher creates a new mock instance.
func NewMockRabbitPublisher[T any](ctrl *gomock.Controller) *MockRabbitPublisher[T] {
	mock := &MockRabbitPublisher[T]{ctrl: ctrl}
	mock.recorder = &MockRabbitPublisherMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitPublisher[T]) EXPECT() *MockRabbitPublisherMockRecorder[T] {
	return m.recorder
}

// Publish mocks base method.
func (m *MockRabbitPublisher[T]) Publish(data T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitPublisherMockRecorder[T]) Publish(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitPublisher[T])(nil).Publish), data)
}
