// Code generated by MockGen. DO NOT EDIT.
// Source: ./errs/rest.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestError is a mock of RestError interface.
type MockRestError struct {
	ctrl     *gomock.Controller
	recorder *MockRestErrorMockRecorder
}

// MockRestErrorMockRecorder is the mock recorder for MockRestError.
type MockRestErrorMockRecorder struct {
	mock *MockRestError
}

// NewMockRestError creates a new mock instance.
func NewMockRestError(ctrl *gomock.Controller) *MockRestError {
	mock := &MockRestError{ctrl: ctrl}
	mock.recorder = &MockRestErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestError) EXPECT() *MockRestErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockRestError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockRestErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRestError)(nil).Error))
}

// Status mocks base method.
func (m *MockRestError) Status() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockRestErrorMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRestError)(nil).Status))
}
